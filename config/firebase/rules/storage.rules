rules_version = '2';

service firebase.storage {
    match /b/{bucket}/o {

        // Helper functions
        function isAuthenticated() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return isAuthenticated() && request.auth.uid == userId;
        }

        function isValidImage() {
            return request.resource.contentType.matches('image/.*') &&
                    request.resource.size < 10 * 1024 * 1024; // Max 10MB
        }

        // User profile pictures - publicly readable, owner can manage
        match /users/{userId}/{allPaths=**} {
            allow read: if true;
            allow write, delete: if isOwner(userId) && isValidImage();
        }

        // Recipe images - publicly readable, authenticated users can upload
        match /recipes/{allPaths=**} {
            allow read: if true;
            allow write: if isAuthenticated() && isValidImage();
            allow delete: if isAuthenticated();
        }

        // Deny all other access
        match /{allPaths=**} {
            allow read, write: if false;
        }
    }
}
